import aiohttp
import json
import logging
from aiogram import types
from keyboards import for_menu

logger = logging.getLogger(__name__)


async def create_buyer(user: types.User) -> bool:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö """

    async with aiohttp.ClientSession() as session:
        async with session.post(url=f'http://127.0.0.1:8000/api/buyer/create/',
                                data={'tg_id': user.id, 'nickname': f'@{user.username}'}) as response:
            return response.status == 201


async def create_order(user: types.User, url: str, message: types.Message) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –≤ –ë–î –ø–æ –∑–∞–ø—Ä–æ—Å—É """
    async with aiohttp.ClientSession() as session:

        data = {'buyer': user.id, 'link': url}

        async with session.post(url='http://127.0.0.1:8000/api/order/create/', data=data) as response:
            if response.status == 201:
                await message.answer(
                    text='–°–ø–∞—Å–∏–±–æ!üåü –ú—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ –Ω–∞—á–∞–ª–∏ –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å. '
                         '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!üì¶',
                    reply_markup=for_menu.keyboard_menu())
            else:
                await message.answer(
                    text='‚ùå –£–ø—Å! –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–∑–∂–µ.',
                    reply_markup=for_menu.keyboard_menu())
                logger.error(f'{user.id}, data: {data}')

            logger.info(f'{user.id}, status: {response.status}, url: {url}')


async def list_orders(user: types.User) -> list | bool:
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ –∑–∞–ø—Ä–æ—Å—É """

    async with aiohttp.ClientSession() as session:
        async with session.get(url=f'http://127.0.0.1:8000/api/order/{user.id}/') as response:
            if response.status == 200:
                text = await response.text()
                logger.info(f'{user.id}, status: {response.status}, list: {text}')
                return json.loads(text)
            else:
                logger.error(f'{user.id}, status: {response.status}')
                return False


async def get_order(user: types.User, order_id: str) -> dict | bool:
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ –∑–∞–ø—Ä–æ—Å—É """

    async with aiohttp.ClientSession() as session:
        async with session.get(url=f'http://127.0.0.1:8000/api/order/{user.id}/{order_id}/') as response:
            if response.status == 200:
                text = await response.text()
                logger.info(f'{user.id}, status: {response.status}, order: {text}')
                return json.loads(text)
            else:
                logger.error(f'{user.id}, status: {response.status}')
                return False


async def update_order(user: types.User, order_id: str, key: str, value: str) -> bool:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–∫–∞–∑–∞"""

    async with aiohttp.ClientSession() as session:
        async with session.patch(url=f'http://127.0.0.1:8000/api/order/{user.id}/{order_id}/',
                                 data={key: value}) as response:
            return response.status == 200
