from aiogram import types, html
from aiogram.enums import ParseMode

from aiogram.utils.formatting import (
    Text, Bold, as_list, as_marked_section, as_key_value, HashTag, TextLink
)

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from states import CheckOrder
from filters.chat_filter import ChatTypeFilter
from service import requests
from keyboards.order_keyboard import list_keyboard, yes_no_keyboard, cancel_menu
from keyboards.for_menu import keyboard_menu

STATUS = {
    "PE": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
    "IP": "–ñ–¥–µ–º –æ—Ç–≤–µ—Ç",
    "BA": "–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏",
    "PA": "–û–ø–ª–∞—á–µ–Ω–æ",
    "CO": "–í—ã–ø–æ–ª–Ω–µ–Ω",
    "CA": "–û—Ç–º–µ–Ω–µ–Ω"
}

router = Router()

router.message.filter(
    ChatTypeFilter(chat_type=['private'])
)


@router.message(StateFilter(None), F.text.lower() == 'üì¶ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã')
async def check_order(message: types.Message, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ """

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
    data_list = await requests.list_orders(message.from_user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤
    if data_list:
        await message.answer('üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:')

        # –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–∫–∞–∑—ã
        for order_dict in data_list:
            content_message = (f"üì¶ <b>–ó–∞–∫–∞–∑</b> {order_dict['id'][:8]}"
                               f"\n- <b>C—Ç–∞—Ç—É—Å</b>: {STATUS[order_dict['status']]}"
                               f"\n- <b>–°—Å—ã–ª–∫–∞</b>: <a href='{order_dict['''link''']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
                               f"\n\n- <b>–¢–µ–∫—É—â—è —Ü–µ–Ω–∞</b>: {order_dict['price'] if order_dict['price'] != '0.00' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'} üíµ")

            await message.answer(text=content_message, parse_mode=ParseMode.HTML)

        # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
        order_list_by_kb = [f'{order["id"][:8]}' for order in data_list if order['status'] == 'IP']

        if order_list_by_kb:
            await message.answer('üëá –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –º–µ–Ω—é üëá', reply_markup=list_keyboard(order_list_by_kb))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞–¥–∏—é
            await state.set_state(CheckOrder.select_order)
            await state.update_data(order_list=data_list)
        else:
            await state.clear()
    else:
        await message.answer('üòî –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç')


@router.message(CheckOrder.select_order, F.text)
async def select_order(message: types.Message, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ """

    user_data = await state.get_data()
    order_list = user_data['order_list']

    flag = False

    for order in order_list:
        if message.text in order['id']:
            flag = True
            break

    if flag:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order_dict = await requests.get_order(message.from_user, message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        if order_dict:

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            order_status = STATUS[order_dict["status"]]

            # –í —Å–ª—É—á–∞–µ —Å—Ç–∞—Ç—É—Å–∞ "–ü–µ—Ä–µ–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç—É" –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
            if order_status is STATUS['IP']:
                await message.answer('üíº –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é? ü§ù', reply_markup=yes_no_keyboard())
                await state.set_state(CheckOrder.confirm_order)
                await state.update_data(order_dict=order_dict)
        else:
            await message.answer('–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç')
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –º–µ–Ω—é')


@router.message(CheckOrder.confirm_order, F.text.lower() == '‚úÖ –¥–∞')
async def confirm_order(message: types.Message, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ """

    user_data = await state.get_data()
    order_dict = user_data['order_dict']

    is_updated = await requests.update_order(user=message.from_user,
                                             order_id=order_dict["id"],
                                             key='status',
                                             value='BA')

    if is_updated:
        await message.answer(text=f'<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - {order_dict["id"][:8]}</b> üéâ\n\n'
                                  '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è '
                                  '–ø–æ–∫—É–ø–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞! üõçÔ∏è',
                             reply_markup=keyboard_menu(), parse_mode=ParseMode.HTML)
        await state.clear()
    else:
        await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ—à–µ–ª, '
                                  f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∑–∂–µ', reply_markup=keyboard_menu())
        await state.clear()


@router.message(CheckOrder.confirm_order, F.text.lower() == '‚ùå –Ω–µ—Ç')
async def cancel_order(message: types.Message, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ """

    user_data = await state.get_data()
    order_dict = user_data['order_dict']

    is_updated = await requests.update_order(user=message.from_user,
                                             order_id=order_dict["id"],
                                             key='status',
                                             value='CA')

    if is_updated:
        await message.answer(text='–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboard_menu())
        await state.clear()
    else:
        await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ—à–µ–ª, '
                                  f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∑–∂–µ', reply_markup=keyboard_menu())
        await state.clear()
